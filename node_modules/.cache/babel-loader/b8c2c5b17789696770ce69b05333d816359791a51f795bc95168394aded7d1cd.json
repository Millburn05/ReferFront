{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\dev\\\\ReferralAssistant\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { startReferral } from './api/chatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = 'http://localhost:8000';\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState('');\n  const [responses, setResponses] = useState('');\n  const handleGenerateReferral = async () => {\n    try {\n      const response = await startReferral(notes);\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json(); // Now this should be correct\n      console.log('Response Data:', data); // Log the response data from the server\n\n      if (!data.thread_id) {\n        throw new Error('Thread ID not found in the response.');\n      }\n      const eventSource = new EventSource(`${baseUrl}/stream-referral/${data.thread_id}`);\n      eventSource.onmessage = event => {\n        console.log('Event Received:', event.data); // Log each received event\n        setResponses(prev => `${prev}\\n${event.data}`);\n      };\n      eventSource.onerror = error => {\n        console.error('EventSource failed:', error);\n        eventSource.close();\n      };\n      eventSource.addEventListener('done', () => {\n        console.log('Stream completed');\n        eventSource.close();\n      });\n    } catch (error) {\n      console.error(\"Error generating referral:\", error);\n      alert(\"There was an error generating the referral. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: notes,\n      onChange: e => setNotes(e.target.value),\n      placeholder: \"Enter patient notes here\",\n      rows: 10,\n      cols: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateReferral,\n      children: \"Generate Referral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Referral Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: responses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"miG8lEpyqBa5+DXrlbfx0s27oK0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","startReferral","jsxDEV","_jsxDEV","baseUrl","App","_s","notes","setNotes","responses","setResponses","handleGenerateReferral","response","ok","Error","data","json","console","log","thread_id","eventSource","EventSource","onmessage","event","prev","onerror","error","close","addEventListener","alert","className","children","value","onChange","e","target","placeholder","rows","cols","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/david/dev/ReferralAssistant/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { startReferral } from './api/chatApi';\n\nconst baseUrl = 'http://localhost:8000';\n\nfunction App() {\n    const [notes, setNotes] = useState('');\n    const [responses, setResponses] = useState('');\n\n    const handleGenerateReferral = async () => {\n        try {\n            const response = await startReferral(notes);\n            if (!response.ok) {\n                throw new Error('Network response was not ok.');\n            }\n            const data = await response.json(); // Now this should be correct\n            console.log('Response Data:', data); // Log the response data from the server\n    \n            if (!data.thread_id) {\n                throw new Error('Thread ID not found in the response.');\n            }\n    \n            const eventSource = new EventSource(`${baseUrl}/stream-referral/${data.thread_id}`);\n            \n            eventSource.onmessage = (event) => {\n                console.log('Event Received:', event.data); // Log each received event\n                setResponses(prev => `${prev}\\n${event.data}`);\n            };\n    \n            eventSource.onerror = (error) => {\n                console.error('EventSource failed:', error);\n                eventSource.close();\n            };\n    \n            eventSource.addEventListener('done', () => {\n                console.log('Stream completed');\n                eventSource.close();\n            });\n        } catch (error) {\n            console.error(\"Error generating referral:\", error);\n            alert(\"There was an error generating the referral. Please try again.\");\n        }\n    };    \n\n    return (\n        <div className=\"App\">\n            <textarea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Enter patient notes here\"\n                rows={10}\n                cols={100}\n            />\n            <button onClick={handleGenerateReferral}>Generate Referral</button>\n            <div>\n                <h2>Referral Response:</h2>\n                <pre>{responses}</pre>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}