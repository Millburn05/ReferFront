{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\dev\\\\ReferralAssistant\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = 'http://localhost:8000';\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState('');\n  const [responses, setResponses] = useState([]); // Store messages or status updates\n\n  const handleGenerateReferral = async () => {\n    const payload = {\n      content: notes\n    };\n    try {\n      const response = await fetch(`${baseUrl}/generate-referral/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.messages) {\n        // If messages are received, set them to be displayed\n        setResponses(data.messages);\n      } else {\n        // Otherwise, display the status (e.g., \"running\", \"failed\")\n        setResponses([`Run Status: ${data.status}`]);\n      }\n      console.log('Referral generation response:', data);\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(`Failed to generate referral: ${error.message}`);\n        setResponses([`Error: ${error.message}`]); // Display error message in the UI\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: notes,\n      onChange: e => setNotes(e.target.value),\n      placeholder: \"Enter patient notes here\",\n      rows: 10,\n      cols: 50 // Adjusted for better layout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateReferral,\n      children: \"Generate Referral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Referral Responses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"AxuBL52QIQ+lt2P5SxeEHh4bg+Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","baseUrl","App","_s","notes","setNotes","responses","setResponses","handleGenerateReferral","payload","content","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","messages","console","log","error","message","className","children","value","onChange","e","target","placeholder","rows","cols","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/david/dev/ReferralAssistant/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst baseUrl = 'http://localhost:8000';\n\nfunction App() {\n    const [notes, setNotes] = useState('');\n    const [responses, setResponses] = useState<string[]>([]); // Store messages or status updates\n\n    const handleGenerateReferral = async () => {\n        const payload = {\n            content: notes\n        };\n\n        try {\n            const response = await fetch(`${baseUrl}/generate-referral/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            if (data.messages) {\n                // If messages are received, set them to be displayed\n                setResponses(data.messages);\n            } else {\n                // Otherwise, display the status (e.g., \"running\", \"failed\")\n                setResponses([`Run Status: ${data.status}`]);\n            }\n            console.log('Referral generation response:', data);\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`Failed to generate referral: ${error.message}`);\n                setResponses([`Error: ${error.message}`]); // Display error message in the UI\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <textarea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Enter patient notes here\"\n                rows={10}\n                cols={50} // Adjusted for better layout\n            />\n            <button onClick={handleGenerateReferral}>Generate Referral</button>\n            <div>\n                <h2>Referral Responses:</h2>\n                {responses.map((response, index) => (\n                    <pre key={index}>{response}</pre>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}